name: Sip Cross-Platform Build

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name (e.g., v3.0.3)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        variant: [sip, socm]
        include:
          - os: ubuntu-latest
            variant: sip
            platform: linux
            build_cmd: dist:linux
            artifact_name: sip-linux
            product_name: Sip
          - os: ubuntu-latest
            variant: socm
            platform: linux
            build_cmd: distb:linux
            artifact_name: socm-linux
            product_name: SipOfCoffeeMud
          - os: windows-latest
            variant: sip
            platform: windows
            build_cmd: dist:win
            artifact_name: sip-windows
            product_name: Sip
          - os: windows-latest
            variant: socm
            platform: windows
            build_cmd: distb:win
            artifact_name: socm-windows
            product_name: SipOfCoffeeMud
          - os: macos-latest
            variant: sip
            platform: macos
            build_cmd: dist:mac
            artifact_name: sip-macos
            product_name: Sip
          - os: macos-latest
            variant: socm
            platform: macos
            build_cmd: distb:mac
            artifact_name: socm-macos
            product_name: SipOfCoffeeMud

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Install Dependencies
        run: npm install

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 rpm jq cpio rpm-build

      - name: Build Sip
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            env -i PATH="$PATH" HOME="$HOME" npm run ${{ matrix.build_cmd }} -- --linux dir deb rpm
            BINNAME="sip-mud-client"
            if [ "$PRODUCT" = "SipOfCoffeeMud" ]; then
              BINNAME="sip-of-coffeemud"
            fi
            VERSION=$(jq -r .version package.json)
            curl -L -o appimagetool https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
            chmod +x appimagetool
            mkdir $PRODUCT.AppDir
            cp -r dist/linux-unpacked/* $PRODUCT.AppDir/
            cd $PRODUCT.AppDir
            echo '#!/bin/bash' > AppRun
            echo 'HERE="$(dirname "$(readlink -f "${0}")")"' >> AppRun
            echo 'exec "${HERE}/'"$BINNAME"'" --gtk-version=3 "$@"' >> AppRun
            chmod +x AppRun
            cp ../.desktop $PRODUCT.desktop
            cp ../icon.png icon.png
            cd ..
            ./appimagetool $PRODUCT.AppDir dist/$PRODUCT-${VERSION}.linux.AppImage
            
            # Repair DEB
            DEB_FILE=$(ls dist/*.deb)
            mkdir deb_extract
            dpkg-deb -x "$DEB_FILE" deb_extract
            dpkg-deb -e "$DEB_FILE" deb_extract/DEBIAN
            # Replace /usr/bin symlink with wrapper script
            echo '#!/bin/bash' > deb_extract/usr/bin/"$BINNAME"
            echo 'exec /opt/'"$PRODUCT"'/'"$BINNAME"' --gtk-version=3 "$@"' >> deb_extract/usr/bin/"$BINNAME"
            chmod +x deb_extract/usr/bin/"$BINNAME"
            # Update .desktop Exec
            sed -i 's|^Exec=.*|Exec=/usr/bin/'"$BINNAME"' --gtk-version=3 %U|' deb_extract/usr/share/applications/"$PRODUCT".desktop
            # Repack
            dpkg-deb -b deb_extract dist/"$PRODUCT"_"$VERSION"_amd64_fixed.deb
            rm -rf deb_extract
            
            # Repair RPM
            RPM_FILE=$(ls dist/*.rpm)
            mkdir rpm_extract
            cd rpm_extract
            rpm2cpio ../"$RPM_FILE" | cpio -idmv
            cd ..
            # Replace /usr/bin symlink with wrapper script (RPM structure similar to DEB)
            echo '#!/bin/bash' > rpm_extract/usr/bin/"$BINNAME"
            echo 'exec /opt/'"$PRODUCT"'/'"$BINNAME"' --gtk-version=3 "$@"' >> rpm_extract/usr/bin/"$BINNAME"
            chmod +x rpm_extract/usr/bin/"$BINNAME"
            # Update .desktop Exec
            sed -i 's|^Exec=.*|Exec=/usr/bin/'"$BINNAME"' --gtk-version=3 %U|' rpm_extract/usr/share/applications/"$PRODUCT".desktop
            # Generate SPEC from original metadata and repack
            rpm -qp "$RPM_FILE" --qf "%{NAME}\n%{VERSION}\n%{RELEASE}\n%{ARCH}\n%{SUMMARY}\n%{DESCRIPTION}\n%{LICENSE}\n%{URL}\n%{GROUP}" > spec_info.txt
            readarray -t SPEC_INFO < spec_info.txt
            echo "Name: \${SPEC_INFO[0]}" > repaired.spec
            echo "Version: \${SPEC_INFO[1]}" >> repaired.spec
            echo "Release: \${SPEC_INFO[2]}" >> repaired.spec
            echo "Architecture: \${SPEC_INFO[3]}" >> repaired.spec
            echo "Summary: \${SPEC_INFO[4]}" >> repaired.spec
            echo "%description" >> repaired.spec
            echo "\${SPEC_INFO[5]}" >> repaired.spec
            echo "License: \${SPEC_INFO[6]}" >> repaired.spec
            echo "URL: \${SPEC_INFO[7]}" >> repaired.spec
            echo "Group: \${SPEC_INFO[8]}" >> repaired.spec
            echo "" >> repaired.spec
            echo "%files" >> repaired.spec
            echo "/" >> repaired.spec
            rpmbuild -bb --define "_topdir $(pwd)" --define "_rpmdir $(pwd)/dist" --buildroot=$(pwd)/rpm_extract repaired.spec
            mv dist/x86_64/"$PRODUCT"-"$VERSION"-*.x86_64.rpm dist/"$PRODUCT"-"$VERSION".x86_64_fixed.rpm
            rm -rf rpm_extract spec_info.txt repaired.spec dist/noarch dist/x86_64
            
          else
            npm run ${{ matrix.build_cmd }}
          fi
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: out/
          retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Release Condition
        run: |
          echo "github.ref is ${{ github.ref }}"
          echo "Release job running for tag: ${{ github.event.inputs.tag || github.ref_name }}"
        shell: bash
        
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/*/*.AppImage
            artifacts/*/*.deb
            artifacts/*/*.rpm
            artifacts/*/*.exe
            artifacts/*/*.dmg
            artifacts/*/*.zip
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: Sip ${{ github.event.inputs.tag || github.ref_name }}
          body: "Automated Sip release for ${{ github.event.inputs.tag || github.ref_name }} - A MUD Client!"