/*
 * Application.java
 *
 * Created on February 3, 2001, 9:40 PM
 */


/**
 *
 * @author	Bo_Zimmerman
 * @version
 */
package com.planet_ink.sip;
import javax.swing.*;

import java.io.*;
import java.util.List;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.*;
public class Sip extends javax.swing.JFrame 
{
	private static final long serialVersionUID = -305975392756577970L;
	
	public static final String filename="sip.ini";
	
	private int 		width	= 580;
	private int 		height	= 590;
	private int 		wwidth	= width-5;
	private int 		pos		= -1;
	private List<String>cmdList	= new Vector<String>();
	private MUDPain 	mudViewPane;
	private JScrollPane scroll;
	private TextArea 	textArea2;
	public String[] 	hotkeys	= new String[10];
	public Connector 	connctr	=null;
	public LoadNGo 		loadngo	=null;
	
	/** Creates new form Application */
	public Sip() 
	{
		initComponents ();
		pack ();
		Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
		int x = (screen.width-width)/2;
		int y = (screen.height-height)/2;
		this.setBounds(x,y,width,height);
		setResizable(false);
		connctr=new Connector();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the FormEditor.
	 */
	private void initComponents() 
	{
		mudViewPane = new MUDPain();
		scroll = new JScrollPane (mudViewPane, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		textArea2 = new java.awt.TextArea("", wwidth,height-85,java.awt.TextArea.SCROLLBARS_VERTICAL_ONLY);
		getContentPane().setLayout(null);
		setTitle("Sip v1.1				 (c) 2001 Bo Zimmerman");
		setFont(new java.awt.Font ("Courier New", 0, 10));
		addWindowListener(new java.awt.event.WindowAdapter() 
		{
			@Override
			public void windowOpened(java.awt.event.WindowEvent evt) 
			{
				formWindowOpened(evt);
			}
			@Override
			public void windowClosing(java.awt.event.WindowEvent evt) 
			{
				exitForm(evt);
			}
			@Override
			public void windowClosed(java.awt.event.WindowEvent evt) 
			{
				formWindowClosed(evt);
			}
			@Override
			public void windowActivated(java.awt.event.WindowEvent evt) 
			{
				formWindowActivated(evt);
			}
		});

		mudViewPane.setBackground(java.awt.Color.white);
		mudViewPane.setFont(new java.awt.Font ("Monospaced", 0, 12));
		mudViewPane.setForeground(java.awt.Color.black);
		mudViewPane.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				textArea1KeyTyped(evt);
			}
			public void keyPressed(java.awt.event.KeyEvent evt) {
				textArea1KeyPressed(evt);
			}
		}
		);

		getContentPane().add(scroll);
		scroll.setBounds(0, 0, wwidth, height-85);
		mudViewPane.setBounds(0, 0, wwidth, height-85);


		textArea2.setBackground(java.awt.Color.white);
		textArea2.setFont(new java.awt.Font ("Monospaced", 0, 12));
		textArea2.setForeground(java.awt.Color.black);
		textArea2.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				textArea2KeyTyped(evt);
			}
		}
		);
		textArea2.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				textArea2KeyPressed(evt);
			}
			}
		);
		getContentPane().add(textArea2);
		textArea2.setBounds(0, height-85, wwidth, 60);
	}

	private void formWindowClosed(java.awt.event.WindowEvent evt) 
	{
	}

	private void formWindowOpened(java.awt.event.WindowEvent evt) 
	{
		lilboy();
	}

	@SuppressWarnings("deprecation")
	public void lilboy()
	{
		mudViewPane.setText("");
		textArea2.setText("");
		textArea2.requestFocus();
		if(loadngo==null)
			loadngo=new com.planet_ink.sip.LoadNGo(this,true);
		loadngo.setBackground(java.awt.Color.yellow);
		loadngo.repaint();
		loadngo.show();
	}

	private void textArea1KeyTyped(java.awt.event.KeyEvent evt) 
	{
		if(((int)evt.getKeyChar())==24)
			evt.setKeyChar((char)3);
		else
		if(((int)evt.getKeyChar())!=3)
			evt.consume();
		// Add your handling code here:
	}

	private void textArea1KeyPressed(java.awt.event.KeyEvent evt) 
	{
		if(((int)evt.getKeyChar())==24)
			evt.setKeyChar((char)3);
		else
		if(((int)evt.getKeyChar())!=3)
			evt.consume();
		// Add your handling code here:
	}

	private void doCommand(String toGo)
	{
		cmdList.add(toGo);
		if(cmdList.size()>100)
			cmdList.remove(0);
		pos=-1;
		writeOut(toGo+((char)10));
		textArea2.setText("");
		connctr.sendOut(toGo);
	}
	
	private void textArea2KeyTyped(java.awt.event.KeyEvent evt) 
	{
		if((evt.getKeyChar()==10)||(evt.getKeyChar()==13))
		{
			String toGo=textArea2.getText();
			doCommand(toGo);
			evt.consume();
		}
		// Add your handling code here:
	}

	private void textArea2KeyPressed(java.awt.event.KeyEvent evt) 
	{
		if(evt.getKeyCode()==KeyEvent.VK_UP)
		{
			if((pos<0)||(pos>=cmdList.size())) pos=cmdList.size()-1;
			if((pos>=0)&&(pos<cmdList.size()))
			{
				textArea2.setText((String)cmdList.get(pos));
				pos--;
			}
			evt.consume();
		}
		else
		if(evt.getKeyCode()==KeyEvent.VK_DOWN)
		{
			if((pos<0)||(pos>=cmdList.size())) pos=-1;
			pos++;
			if((pos>=0)&&(pos<cmdList.size()))
				textArea2.setText((String)cmdList.get(pos));
			evt.consume();
		}
		else
		{
			int hotkey=-1;
			switch(evt.getKeyCode())
			{
			case java.awt.event.KeyEvent.VK_F10: hotkey=0; break; 
			case java.awt.event.KeyEvent.VK_F1: hotkey=1; break; 
			case java.awt.event.KeyEvent.VK_F2: hotkey=2; break; 
			case java.awt.event.KeyEvent.VK_F3: hotkey=3; break; 
			case java.awt.event.KeyEvent.VK_F4: hotkey=4; break; 
			case java.awt.event.KeyEvent.VK_F5: hotkey=5; break; 
			case java.awt.event.KeyEvent.VK_F6: hotkey=6; break; 
			case java.awt.event.KeyEvent.VK_F7: hotkey=7; break; 
			case java.awt.event.KeyEvent.VK_F8: hotkey=8; break; 
			case java.awt.event.KeyEvent.VK_F9: hotkey=9; break; 
			}
			if(hotkey>=0)
			{
				if((evt.isShiftDown())||(evt.isControlDown())||(evt.isAltDown()))
				{
					if(textArea2.getText().trim().length()>0)
					{
						hotkeys[hotkey]=textArea2.getText();
						if(loadngo!=null)
							save(loadngo.theList,loadngo.thePorts,loadngo.listIndex,hotkeys);
					}
				}
				else
				if(hotkeys[hotkey]!=null)
				{
					String s=hotkeys[hotkey];
					for(int i=0;i<s.length();i++)
						if(s.charAt(i)=='~')
						{
							String cmd=s.substring(0,i);
							doCommand(cmd);
							s=s.substring(i+1);
						}
					textArea2.setText(s);
				}
				evt.consume();
			}
		}
		// Add your handling code here:
	}

	private void formWindowActivated(java.awt.event.WindowEvent evt) 
	{
		textArea2.requestFocus();
		// Add your handling code here:
	}

	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) 
	{
		System.exit (0);
	}

	public void writeOut(char c)
	{
		writeOut(""+c);
	}
	
	public void writeOut(String s)
	{
		if(mudViewPane.getText().length()>12240)
			mudViewPane.setText(mudViewPane.getText().substring(2048));
		mudViewPane.append(s);
		JScrollBar vertical = scroll.getVerticalScrollBar();
		vertical.setValue( vertical.getMaximum() );
	}
	/**
	* @param args the command line arguments
	*/
	@SuppressWarnings("deprecation")
	public static void main (String args[]) 
	{
		Sip myApp=new Sip ();
		myApp.show();
		myApp.textArea2.requestFocus();
	}

	public void save(String[] theList, int[] thePorts, int listIndex, String[] hotkeys)
	{
		try
		{
			FileWriter writer=new FileWriter(filename,false);
			for(int i=0;i<10;i++)
				if((hotkeys[i]==null)||(hotkeys[i].length()==0))
					writer.write("\r\n");
				else
					writer.write(hotkeys[i]+"\r\n");
			for(int i=0;i<listIndex;i++)
			{
				writer.write(theList[i]+"\r\n");
				writer.write(thePorts[i]+"\r\n");
			}
			writer.flush();
			writer.close();
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}
}
